・predict*.png
model_50_2
self.conv1 = L.Convolution2D(1, 5, (1, 3), stride=1)
self.conv2 = L.Convolution2D(5, 10, (1, 3), stride=1)
self.conv3 = L.Convolution2D(10, 20, (1, 3), stride=1)

・predict*_2.png
model_50_3
self.conv1 = L.Convolution2D(1, 5, (1, 100), stride=1)
self.conv2 = L.Convolution2D(5, 10, (1, 50), stride=1)
self.conv3 = L.Convolution2D(10, 20, (1, 10), stride=1)
(model_5,7,200,1000)

・predict*_3.png
model_20_2
self.conv1 = L.Convolution2D(1, 5, (1, 120), stride=1)
self.conv2 = L.Convolution2D(5, 10, (1, 60), stride=1)
self.conv3 = L.Convolution2D(10, 20, (1, 5), stride=1)

・predict*_4.png
model_20_3 0.196013
self.conv1 = L.Convolution2D(1, 5, (1, 100), stride=5)
self.conv2 = L.Convolution2D(5, 10, (1, 50), stride=3)
self.conv3 = L.Convolution2D(10, 20, (1, 10), stride=1)


・2001/01/02〜2017/10/31のドル円の1分足の終値を用いた
・1440分=１日分を1セットの入力として学習
・目標のイメージは、チャートの形を学習して、続くチャートの形を予想する
・testでは、1440分を入力し１分先の予測を出力。これを1分ずつずらしながら1日分予測
→あまり変動しないor学習が不十分だと入力に関わらず上昇/下降
→あまり変動しない=大きな変動に全く対応できない。入力部分に引っ張られて予測の１つ目から大きく乖離(画像参照)
・BatchNormalizationを入れるとlossが非常に大きくなった
・Convolution2Dは最初3〜5ずつ畳み込んでいたが、100ずつなど幅を大きくすることでチャートの形を掴もうとした。
→予測にある程度の形(山)が見られるようになった(気がする)(predict*.png→predict*_2.png参照)
・まず予測のスタート地点の乖離をなくすために、入力データを終値の生データから差分に変更。
・変化が小さすぎて、ほぼ水平な予測が出力された。
→差分を10倍など適当な値で定数倍してあげると、なんとなくいい感じの出力が出た。
・BatchNormalizationをしてみると、出力の変動が非常に大きくなった。定数倍では制御できず。
(・他の通貨を縦に並べて一緒に畳み込んだらどうなるか？
・average_pooling_2dを用いると、いい感じになった(気がする)
→10倍にしても横ばいに近い(predict_435677_diff_avepool_x10/x100.png参照)
→今のところ定数の決め方の根拠はないので、上の画像の100倍は偶然良いパラメータを選んだに過ぎない(コンスタントに良い結果が出れば良いけど…)
→上昇/下降は定数倍によらないので(定数倍すると見やすくなる程度)、1日後に上がる/下がるを予測してバイナリオプションには使えるのでは？
→スタート地点と1日後の実際のレート/予測値を比較し、正誤判定
→複数回試行して正答率を出したい。
